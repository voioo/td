name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.1.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.5'
          cache: true
          
      - name: Run tests
        working-directory: ./cmd/td
        run: |
          go vet ./...
          go test -v ./...

  build:
    needs: test
    name: Build - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            binary: td
            archive: tar.gz
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            binary: td
            archive: tar.gz
          - os: macos-latest
            platform: darwin
            arch: amd64
            binary: td
            archive: tar.gz
          - os: macos-latest
            platform: darwin
            arch: arm64
            binary: td
            archive: tar.gz
          - os: windows-latest
            platform: windows
            arch: amd64
            binary: td.exe
            archive: zip
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Version
        id: get_version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.5'
          cache: true

      - name: Build Binary
        env:
          GOOS: ${{ matrix.platform }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          cd cmd/td
          go build -ldflags="-s -w -X main.version=$VERSION" -o ${{ matrix.binary }}

      - name: Prepare Release Files
        shell: bash
        run: |
          mkdir -p release
          cp cmd/td/${{ matrix.binary }} release/
          cp LICENSE release/
          cp README.md release/
          cd release
          if [[ "${{ matrix.archive }}" == "tar.gz" ]]; then
            tar czf ../td_${{ matrix.platform }}_${{ matrix.arch }}.${{ matrix.archive }} *
          else
            powershell -Command "Compress-Archive -Path * -DestinationPath ../td_${{ matrix.platform }}_${{ matrix.arch }}.${{ matrix.archive }}"
          fi
          cd ..
          
          # Create checksum file
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            powershell -Command "(Get-FileHash td_${{ matrix.platform }}_${{ matrix.arch }}.${{ matrix.archive }} -Algorithm SHA256).Hash.ToLower() + '  ' + 'td_${{ matrix.platform }}_${{ matrix.arch }}.${{ matrix.archive }}'" > td_${{ matrix.platform }}_${{ matrix.arch }}.sha256
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            shasum -a 256 td_${{ matrix.platform }}_${{ matrix.arch }}.${{ matrix.archive }} > td_${{ matrix.platform }}_${{ matrix.arch }}.sha256
          else
            sha256sum td_${{ matrix.platform }}_${{ matrix.arch }}.${{ matrix.archive }} > td_${{ matrix.platform }}_${{ matrix.arch }}.sha256
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: td-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            td_${{ matrix.platform }}_${{ matrix.arch }}.${{ matrix.archive }}
            td_${{ matrix.platform }}_${{ matrix.arch }}.sha256

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build.outputs.version }}
          name: Release ${{ needs.build.outputs.version }}
          files: td-*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  homebrew:
    needs: [build, release]  # Need both to get version and ensure release exists
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: voioo/homebrew-tap
          token: ${{ secrets.TAP_GITHUB_TOKEN }}
          ref: main
          fetch-depth: 0

      - name: Update Homebrew Formula
        env:
          VERSION: ${{ needs.build.outputs.version }}  # Use version from build job
        run: |
          mkdir -p Formula
          
          # Get SHA256 for macOS Intel build
          SHA256_INTEL=$(curl -sL https://github.com/${{ github.repository }}/releases/download/${VERSION}/td_darwin_amd64.sha256 | awk '{print $1}')
          SHA256_ARM64=$(curl -sL https://github.com/${{ github.repository }}/releases/download/${VERSION}/td_darwin_arm64.sha256 | awk '{print $1}')
          
          cat > Formula/td.rb << EOF
          class Td < Formula
            desc "Simple task management TUI tool"
            homepage "https://github.com/voioo/td"
            version "${VERSION#v}"
            
            on_macos do
              on_arm do
                url "https://github.com/voioo/td/releases/download/${VERSION}/td_darwin_arm64.tar.gz"
                sha256 "${SHA256_ARM64}"
              end
              on_intel do
                url "https://github.com/voioo/td/releases/download/${VERSION}/td_darwin_amd64.tar.gz"
                sha256 "${SHA256_INTEL}"
              end
            end
            
            def install
              bin.install "td"
            end
            
            test do
              system "#{bin}/td", "--version"
            end
          end
          EOF
          
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add Formula/td.rb
          git commit -m "td ${VERSION}: Update formula"
          git push

  aur-publish:
    needs: [build, release]
    runs-on: ubuntu-latest
    container: 
      image: archlinux:base-devel
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          pacman -Sy --noconfirm git openssh base-devel curl

      - name: Setup SSH
        run: |
          mkdir -p /root/.ssh
          echo "aur.archlinux.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEuBKrPzbh3BkSlpVbAgdHxT8GdwXqmyvz8yQBv+1zY+" > /root/.ssh/known_hosts
          chmod 600 /root/.ssh/known_hosts

      - name: Install SSH key for AUR
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          known_hosts: 'aur.archlinux.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEuBKrPzbh3BkSlpVbAgdHxT8GdwXqmyvz8yQBv+1zY+'
          name: id_ed25519
          config: |
            Host aur.archlinux.org
              IdentityFile ~/.ssh/id_ed25519
              User aur

      - name: Update PKGBUILD
        env:
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          
          echo "Using version: $VERSION"
          
          SHA256_AMD64=$(curl -sL https://github.com/${{ github.repository }}/releases/download/v${VERSION}/td_linux_amd64.sha256 | awk '{print $1}')
          SHA256_ARM64=$(curl -sL https://github.com/${{ github.repository }}/releases/download/v${VERSION}/td_linux_arm64.sha256 | awk '{print $1}')
          
          echo "AMD64 SHA: $SHA256_AMD64"
          echo "ARM64 SHA: $SHA256_ARM64"
          
          cat > PKGBUILD << EOF
          # Maintainer: Voislav V. <voyo@thelazysre.com>
          pkgname=td-bin
          pkgver=${VERSION}
          pkgrel=1
          pkgdesc="Simple task management TUI tool"
          arch=('x86_64' 'aarch64')
          url="https://github.com/voioo/td"
          license=('0BSD')
          provides=('td')
          conflicts=('td')
          depends=('git')
          
          source_x86_64=("https://github.com/voioo/td/releases/download/v\${pkgver}/td_linux_amd64.tar.gz")
          source_aarch64=("https://github.com/voioo/td/releases/download/v\${pkgver}/td_linux_arm64.tar.gz")
          sha256sums_x86_64=('${SHA256_AMD64}')
          sha256sums_aarch64=('${SHA256_ARM64}')
          
          package() {
              install -Dm755 td "\${pkgdir}/usr/bin/td"
              install -Dm644 LICENSE "\${pkgdir}/usr/share/licenses/\${pkgname}/LICENSE"
              install -Dm644 README.md "\${pkgdir}/usr/share/doc/\${pkgname}/README.md"
          }
          EOF

      - name: Generate .SRCINFO
        run: |
          useradd builduser -m
          chown -R builduser:builduser .
          su builduser -c "makepkg --printsrcinfo > .SRCINFO"

      - name: Publish to AUR
        env:
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git clone ssh://aur@aur.archlinux.org/td.git aur-repo
          cp PKGBUILD aur-repo/
          cp .SRCINFO aur-repo/
          cd aur-repo
          git add PKGBUILD .SRCINFO
          git commit -m "Update to version ${VERSION}"
          git push