name: CI

on:
  pull_request:
  push:
    branches: [ "main" ]
    paths:
      # Core application files
      - 'cmd/td/**'
      - 'internal/**'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'

      # Documentation and configuration
      - 'README.md'
      - 'DEVELOPMENT.md'

      # Installation and packaging files
      - 'install.ps1'
      - 'PKGBUILD'

      # CI/CD files
      - '.github/workflows/release.yml'
      - '.github/workflows/ci.yml'

permissions:
  contents: write
  pull-requests: read
  actions: read

jobs:
  validate-commits:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit messages
        run: |
          # Get all commits in the PR (excluding merge commits)
          git fetch origin ${{ github.base_ref }}
          COMMITS=$(git log --no-merges --pretty=format:"%s" origin/${{ github.base_ref }}..HEAD)
          
          # Validate each commit message
          echo "$COMMITS" | while read -r msg; do
            if ! echo "$msg" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\([a-z]+\))?!?: .+$|^BREAKING CHANGE: .+$"; then
              echo "Invalid commit message format: $msg"
              echo "Expected format: type(scope)?: description"
              echo "Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore"
              echo "Examples:"
              echo "  feat: add new task filtering"
              echo "  fix(ui): correct task deletion"
              echo "  BREAKING CHANGE: change task file format"
              exit 1
            fi
          done

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.0'
          cache: true

      - name: Check formatting
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run tests
        run: go test -v ./...

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest'
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  create-tag:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    environment: release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Determine version bump
        id: bump
        run: |
          # Get commit messages since last tag
          COMMITS=$(git log $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --pretty=format:"%s")
          
          # Determine version bump based on commit messages
          if echo "$COMMITS" | grep -q "^BREAKING CHANGE:\|^[[:alpha:]]\+!:"; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q "^feat:"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi
          
      - name: Create and push tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"
          
          case "${{ steps.bump.outputs.bump }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          new_tag="v$major.$minor.$patch"
          echo "Creating new tag: $new_tag"
          git tag -a "$new_tag" -m "Release $new_tag"
          git push origin "$new_tag"
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }} 