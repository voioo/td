name: CI

on:
  pull_request:
  push:
    branches: [ "main" ]
    paths:
      # Core application files
      - 'cmd/td/**'
      - 'Makefile'
      
      # Installation and packaging files
      - 'install.ps1'
      - 'PKGBUILD'
      
      # CI/CD files
      - '.github/workflows/release.yml'
      - '.github/workflows/ci.yml'

permissions:
  contents: write
  pull-requests: read
  actions: read

jobs:
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.5'
          cache: true

      - name: Check formatting
        if: matrix.os == 'ubuntu-latest'
        working-directory: ./cmd/td
        run: |
          if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -l .
            exit 1
          fi

      - name: Run go vet
        working-directory: ./cmd/td
        run: go vet ./...

      - name: Run tests
        working-directory: ./cmd/td
        run: go test -v ./...

  create-tag:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: 
      name: release
      url: ${{ github.server_url }}/${{ github.repository }}/releases
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}
          
      - name: Create and push tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"
          new_patch=$((patch + 1))
          new_tag="v$major.$minor.$new_patch"
          
          echo "Creating new tag: $new_tag"
          git tag -a "$new_tag" -m "Release $new_tag"
          git push origin "$new_tag"
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }} 